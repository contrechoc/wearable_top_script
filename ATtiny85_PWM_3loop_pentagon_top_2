/* Contrechoc 2015
For the wearable, f√ºnfeck_top, back

 analog light value in three LED's
 makes looping in PWM at a certain speed
 
*/

#define F_CPU 8000000UL  
#include <avr/io.h>
#include <util/delay.h>


uint8_t r = 30, g = 30, b = 30;
uint8_t dr = 1, dg = -1, db = -1;
uint8_t ddr = 3, ddg = 2, ddb = 1;

uint8_t r1 = 0, g1 = 0, b1 = 0;

unsigned short value = 0;

void setPWM3()
{
	DDRB = 1 << DDB4 | 1 << DDB1 | 1 << DDB0;
	TCCR0A = 2 << COM0A0 | 2 << COM0B0 | (1 << WGM00) | (1 << WGM02);
	TCCR0B = 0 << WGM02 | 1 << CS00;
	TCCR1 = 0 << PWM1A | 0 << COM1A0 | 1 << CS10;
	GTCCR = 1 << PWM1B | 2 << COM1B0;
}

void resetPWM()
{
	TCCR0A = 0;
	TCCR0B = 0;
	TCCR1 = 0;
	GTCCR = 0;

}

void adc_init()
{

	PORTB &= ~_BV(PB3);
	DDRB &= ~_BV(PB3);

	ADMUX = 0x0D;//B1101 = GND attiny45 page 139

	ADCSRA |= _BV(ADEN) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADSC);
	/* wait for the ADC to return a sample */
	loop_until_bit_is_clear(ADCSRA, ADSC);
}

unsigned short adc_read(unsigned char pin)
{
	unsigned char l, h, r;
	r = (ADMUX & 0xf0) | (pin & 0x0f);
	ADMUX = r; /* select the input channel */
	ADCSRA |= _BV(ADSC);
	loop_until_bit_is_clear(ADCSRA, ADSC);
	/* must read the low ADC byte before the high ADC byte */
	l = ADCL;
	h = ADCH;
	return ((unsigned short)h << 8) | l;
}

void blinkLED(char ledNr)
{

	PORTB &= ~_BV(PB0);
	PORTB &= ~_BV(PB1);
	PORTB &= ~_BV(PB4);

	for(int i = 0; i < 10; i++)
	{
		PORTB |= _BV(ledNr);
		_delay_ms(500 / i);
		PORTB &= ~_BV(ledNr);
		_delay_ms(500 / i);
	}

}


void setup()
{

	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB4)  ;

	adc_init();

}

void loop()
{
	blinkLED(PB0);
	resetPWM();
	adc_init();

	for(int i = 0; i < 10; i++)
	{
		PORTB &= ~_BV(PB0);
		PORTB &= ~_BV(PB1);
		PORTB &= ~_BV(PB4);

		value = adc_read(3);
		if ( value > 512 )  PORTB |= _BV(PB0);
		if ( value > 512 + 256 )  PORTB |= _BV(PB1);
		if ( value > 512 + 256 + 125 )  PORTB |= _BV(PB4);
		_delay_ms(250);
	}


	blinkLED(PB2);
	
	setPWM3();

	for(int i = 0; i < 4096; i++)
	{

		OCR0A = r1;
		OCR0B = g1;
		OCR1B = b1;

		r += dr * ddr;
		g += dg * ddg;
		b += db * ddb;

		if (r > 250) dr *= -1;
		if (g > 250) dg *= -1;
		if (b > 250) db *= -1;

		if (r < 5)
		{
			dr *= -1;
			dg *= -1;
		}
		if (g < 5) dg *= -1;
		if (b < 5) db *= -1;

		if ( r > 50) ddr = 5;
		else ddr = 1;
		if ( g > 50) ddg = 5;
		else ddg = 1;
		if ( b > 50) ddb = 5;
		else ddb = 1;

		/*
		update compare registers with red, green and blue values
		*/
		OCR0A = r;
		OCR0B = g;
		OCR1B = b;

		r1 = r;
		g1 = g;
		b1 = b;
		_delay_ms(2 * (value / 10));
	}
}



